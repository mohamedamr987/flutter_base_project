plugins {
    id "com.android.application"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader -> localProperties.load(reader) }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

// Optional: pull app names for each flavor
def appNames = [
    dev    : localProperties.getProperty('app.name.dev') ?: "App Test",
    staging : localProperties.getProperty('app.name.staging') ?: "App Staging",
    prod    : localProperties.getProperty('app.name.prod') ?: "App"
]

android {
    namespace "com.base_project.app"
    compileSdk flutter.compileSdkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        dev {
            def props = loadSigningProps("dev-key.properties")
            applySigning(props, delegate)
        }
        staging {
            def props = loadSigningProps("staging-key.properties")
            applySigning(props, delegate)
        }
        prod {
            def props = loadSigningProps("prod-key.properties")
            applySigning(props, delegate)
        }
    }

    flavorDimensions "env"
    productFlavors {
        dev {
            dimension "env"
            applicationId "com.base_project.dev"
            versionNameSuffix "-dev"
            signingConfig signingConfigs.dev
            resValue "string", "app_name", appNames.dev
            manifestPlaceholders = [hostName: "dev.example.com"]
        }
        staging {
            dimension "env"
            applicationId "com.base_project.staging"
            versionNameSuffix "-staging"
            signingConfig signingConfigs.staging
            resValue "string", "app_name", appNames.staging
            manifestPlaceholders = [hostName: "dev.example.com"]
        }
        prod {
            dimension "env"
            applicationId "com.base_project"
            signingConfig signingConfigs.prod
            resValue "string", "app_name", appNames.prod
            manifestPlaceholders = [hostName: "dev.example.com"]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
        }
    }

    applicationVariants.all { variant ->
        def flavor = variant.flavorName
        def googleServicesFile = file("src/${flavor}/google-services.json")
        if (googleServicesFile.exists()) {
            copy {
                from googleServicesFile
                into "."
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:32.8.1')
    implementation "org.jetbrains.kotlin:kotlin-parcelize-runtime:1.9.0"
    implementation 'com.google.firebase:firebase-analytics'
}

// Utility method to load signing properties
def loadSigningProps(String fileName) {
    def props = new Properties()
    def file = rootProject.file(fileName)
    if (file.exists()) {
        file.withInputStream { props.load(it) }
    }
    return props
}

// Apply signing to a config block
def applySigning(Properties props, def config) {
    config.keyAlias = props['keyAlias']
    config.keyPassword = props['keyPassword']
    config.storeFile = props['storeFile'] ? file(props['storeFile']) : null
    config.storePassword = props['storePassword']
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
}
